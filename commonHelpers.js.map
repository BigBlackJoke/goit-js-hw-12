{"version":3,"file":"commonHelpers.js","sources":["../src/js/render-functions.js","../src/js/pixabay-api.js","../src/main.js"],"sourcesContent":["export const renderFunctions = (data, gallery) => {\n    const makingGallery = data.hits.map((hit => {\n        return `<li>\n          <a href=\"${hit.largeImageURL}\"><img src=\"${hit.webformatURL}\" alt=\"${hit.tags}\"/></a>\n          <div class=\"imageInfo\">\n            <div class=\"imageEachInfo\">\n                <span name=\"likes\">Likes</span>\n                <span name=\"likes-num\">${hit.likes}</span>\n            </div>\n            <div class=\"imageEachInfo\">\n                <span name=\"views\">Views</span>\n                <span name=\"views-num\">${hit.views}</span>\n            </div>\n            <div class=\"imageEachInfo\">\n                <span name=\"comments\">Comments</span>\n                <span name=\"comments-num\">${hit.comments}</span>\n            </div>\n            <div class=\"imageEachInfo\">\n                <span name=\"downloads\">Downloads</span>\n                <span name=\"downloads-num\">${hit.downloads}</span>\n            </div>\n          </div>\n        </li>`\n    }));\n    gallery.innerHTML = makingGallery.join('');\n};\n\n","import axios from 'axios';\n\n// export const pixabayApi = (usersRequest) => {\n//     const searchParams = new URLSearchParams({\n//             key: \"44096290-4b282435e4320beb633e0ff8a\",\n//             q: usersRequest,\n//             image_type: \"photo\",\n//             orientation: \"horizontal\",\n//             safesearch: \"true\",\n//         });\n\n//         const url = `https://pixabay.com/api/?${searchParams.toString()}`;\n\n//     return fetch(url)\n//         .then((response) => {\n//             if (!response.ok) {\n//                 throw new Error(response.status);\n//             }\n//             return response.json();\n//         })\n//         .catch((error) => console.log(error));    \n// };\n\nexport const pixabayApi = async (usersRequest) => {\n    try {\n        pixabayApi = await axios.get(`https://pixabay.com/api/`, {\n            params: {\n                key: \"44096290-4b282435e4320beb633e0ff8a\",\n                q: usersRequest,\n                image_type: \"photo\",\n                orientation: \"horizontal\",\n                safesearch: \"true\"\n            }\n        })\n    } catch (error) {\n        console.log(error);\n    }\n};","import iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nimport SimpleLightbox from \"simplelightbox\";\nimport \"simplelightbox/dist/simple-lightbox.min.css\";\n\nimport axios from 'axios';\n\nimport { renderFunctions } from './js/render-functions';\nimport { pixabayApi } from './js/pixabay-api';\n\n\nconst form = document.querySelector(\".form\");\nconst input = document.querySelector(\".searching-input\");\nconst gallery = document.querySelector(\".gallery-elements\");\nconst loader = document.querySelector(\".loader\");\n\nloader.style.display = 'none';\n\nlet lightbox = new SimpleLightbox('.gallery a', { captions: true, captionsData: 'alt', captionPosition: 'bottom', captionDelay: 250 });\n\nform.addEventListener(\"submit\", (event) => {\n    event.preventDefault();\n    gallery.innerHTML = '';\n    if (input.value != \"\") {\n\n        loader.style.display = 'block';\n\n        const start = async () => {\n            try {\n                start = await axios.get(pixabayApi(input.value));\n            } catch (error) {\n        console.log(error);\n        }\n        }\n\n        start()\n            .then((data) => {\n                if (data.hits.length === 0) {\n                    iziToast.show({\n                        message: 'Sorry, there are no images matching your search query. Please, try again!',\n                        messageColor: 'rgba(250, 250, 251, 1)',\n                        messageSize: '16px',\n                        messageLineHeight: '24px',\n                        backgroundColor: 'rgba(181, 27, 27, 1)',\n                        position: 'topRight',\n                        maxWidth: '432px',\n                        timeout: 2000\n                    });\n                } else {\n                    renderFunctions(data, gallery);\n                    lightbox.refresh();\n                };\n            })\n            .catch((error) => {\n                console.log(error);\n            })\n            .finally(() => {\n                loader.style.display = 'none';\n                event.target.reset();\n            });\n            \n\n        // pixabayApi(input.value)\n        //     .then((data) => {\n        //         if (data.hits.length === 0) {\n        //             iziToast.show({\n        //                 message: 'Sorry, there are no images matching your search query. Please, try again!',\n        //                 messageColor: 'rgba(250, 250, 251, 1)',\n        //                 messageSize: '16px',\n        //                 messageLineHeight: '24px',\n        //                 backgroundColor: 'rgba(181, 27, 27, 1)',\n        //                 position: 'topRight',\n        //                 maxWidth: '432px',\n        //                 timeout: 2000\n        //             });\n        //         } else {\n        //             renderFunctions(data, gallery);\n        //             lightbox.refresh();\n        //         };\n        //     })\n        //     .catch((error) => {\n        //         console.log(error);\n        //     })\n        //     .finally(() => {\n        //         loader.style.display = 'none';\n        //         event.target.reset();\n        //     });\n    } else {\n        iziToast.show({\n            message: 'Searching input cannot be empty! Please fill the input to start searching.',\n            messageColor: 'rgba(255, 255, 255, 1)',\n            messageSize: '16px',\n            messageLineHeight: '24px',\n            backgroundColor: 'rgba(181, 27, 27, 1)',\n            position: 'topRight',\n            maxWidth: '432px',\n            timeout: 2000\n        });\n    }\n});"],"names":["renderFunctions","data","gallery","makingGallery","hit","pixabayApi","usersRequest","axios","error","form","input","loader","lightbox","SimpleLightbox","event","start","iziToast"],"mappings":"owBAAO,MAAMA,EAAkB,CAACC,EAAMC,IAAY,CAC9C,MAAMC,EAAgBF,EAAK,KAAK,IAAKG,GAC1B;AAAA,qBACMA,EAAI,aAAa,eAAeA,EAAI,YAAY,UAAUA,EAAI,IAAI;AAAA;AAAA;AAAA;AAAA,yCAI9CA,EAAI,KAAK;AAAA;AAAA;AAAA;AAAA,yCAITA,EAAI,KAAK;AAAA;AAAA;AAAA;AAAA,4CAINA,EAAI,QAAQ;AAAA;AAAA;AAAA;AAAA,6CAIXA,EAAI,SAAS;AAAA;AAAA;AAAA,gBAKtDF,EAAQ,UAAYC,EAAc,KAAK,EAAE,CAC7C,ECFaE,EAAa,MAAOC,GAAiB,CAC9C,GAAI,CACAD,EAAa,MAAME,EAAM,IAAI,2BAA4B,CACrD,OAAQ,CACJ,IAAK,qCACL,EAAGD,EACH,WAAY,QACZ,YAAa,aACb,WAAY,MACf,CACb,CAAS,CACJ,OAAQE,EAAO,CACZ,QAAQ,IAAIA,CAAK,CACpB,CACL,ECzBMC,EAAO,SAAS,cAAc,OAAO,EACrCC,EAAQ,SAAS,cAAc,kBAAkB,EACjDR,EAAU,SAAS,cAAc,mBAAmB,EACpDS,EAAS,SAAS,cAAc,SAAS,EAE/CA,EAAO,MAAM,QAAU,OAEvB,IAAIC,EAAW,IAAIC,EAAe,aAAc,CAAE,SAAU,GAAM,aAAc,MAAO,gBAAiB,SAAU,aAAc,GAAK,CAAA,EAErIJ,EAAK,iBAAiB,SAAWK,GAAU,CAGvC,GAFAA,EAAM,eAAc,EACpBZ,EAAQ,UAAY,GAChBQ,EAAM,OAAS,GAAI,CAEnBC,EAAO,MAAM,QAAU,QAEvB,MAAMI,EAAQ,SAAY,CACtB,GAAI,CACAA,EAAQ,MAAMR,EAAM,IAAIF,EAAWK,EAAM,KAAK,CAAC,CAClD,OAAQF,EAAO,CACpB,QAAQ,IAAIA,CAAK,CAChB,CACA,EAEDO,EAAO,EACF,KAAMd,GAAS,CACRA,EAAK,KAAK,SAAW,EACrBe,EAAS,KAAK,CACV,QAAS,4EACT,aAAc,yBACd,YAAa,OACb,kBAAmB,OACnB,gBAAiB,uBACjB,SAAU,WACV,SAAU,QACV,QAAS,GACjC,CAAqB,GAEDhB,EAAgBC,EAAMC,CAAO,EAC7BU,EAAS,QAAO,GAEvB,EACA,MAAOJ,GAAU,CACd,QAAQ,IAAIA,CAAK,CACjC,CAAa,EACA,QAAQ,IAAM,CACXG,EAAO,MAAM,QAAU,OACvBG,EAAM,OAAO,OAC7B,CAAa,CA4Bb,MACQE,EAAS,KAAK,CACV,QAAS,6EACT,aAAc,yBACd,YAAa,OACb,kBAAmB,OACnB,gBAAiB,uBACjB,SAAU,WACV,SAAU,QACV,QAAS,GACrB,CAAS,CAET,CAAC"}